// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comments;

#nullable disable

namespace comments.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022140530_DataSeeding")]
    partial class DataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("comments.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = -1,
                            Path = "./images/avatar/image-juliosomo.png",
                            UserId = -1
                        },
                        new
                        {
                            AssetId = -2,
                            Path = "./images/avatar/image-amyrobson.png",
                            UserId = -2
                        },
                        new
                        {
                            AssetId = -3,
                            Path = "./images/avatar/image-maxblagun.png",
                            UserId = -3
                        },
                        new
                        {
                            AssetId = -4,
                            Path = "./images/avatar/image-ramsesmiron.png",
                            UserId = -4
                        },
                        new
                        {
                            AssetId = -5,
                            Path = "./images/avatar/image-juliosomo.webp",
                            UserId = -1
                        },
                        new
                        {
                            AssetId = -6,
                            Path = "./images/avatar/image-amyrobson.webp",
                            UserId = -2
                        },
                        new
                        {
                            AssetId = -7,
                            Path = "./images/avatar/image-maxblagun.webp",
                            UserId = -3
                        },
                        new
                        {
                            AssetId = -8,
                            Path = "./images/avatar/image-ramsesmiron.webp",
                            UserId = -4
                        });
                });

            modelBuilder.Entity("comments.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = -1,
                            Content = "Impressive! Though it seems the drag feature could be improved. But overall it looks incredible. You've nailed the design and the responsiveness at various breakpoints works really well.",
                            CreatedAt = new DateTime(2025, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Score = 12,
                            UserId = -2
                        },
                        new
                        {
                            CommentId = -2,
                            Content = "Woah, your project looks awesome! How long have you been coding for? I'm still new, but think I want to dive into React as well soon. Perhaps you can give me an insight on where I can learn React? Thanks!",
                            CreatedAt = new DateTime(2025, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Score = 5,
                            UserId = -3
                        },
                        new
                        {
                            CommentId = -3,
                            Content = "If you're still new, I'd recommend focusing on the fundamentals of HTML, CSS, and JS before considering React. It's very tempting to jump ahead but lay a solid foundation first.",
                            CreatedAt = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentCommentId = -2,
                            Score = 4,
                            UserId = -4
                        },
                        new
                        {
                            CommentId = -4,
                            Content = "I couldn't agree more with this. Everything moves so fast and it always seems like everyone knows the newest library/framework. But the fundamentals are what stay constant.",
                            CreatedAt = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentCommentId = -2,
                            Score = 2,
                            UserId = -1
                        });
                });

            modelBuilder.Entity("comments.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            Name = "juliosomo"
                        },
                        new
                        {
                            UserId = -2,
                            Name = "amyrobson"
                        },
                        new
                        {
                            UserId = -3,
                            Name = "maxblagun"
                        },
                        new
                        {
                            UserId = -4,
                            Name = "ramsesmiron"
                        });
                });

            modelBuilder.Entity("comments.Asset", b =>
                {
                    b.HasOne("comments.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("comments.Comment", b =>
                {
                    b.HasOne("comments.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("comments.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("comments.Comment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
